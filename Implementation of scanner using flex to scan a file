
KEYWORDS (integer|read|display|if|else|then|while|for|to)
RELATIONAL (​<|​<=|​>​|>=|​==|​#)
ASSIGNMENT (=|\+=|\-=|\*=|\/=)
ARITHMETIC [+\-\*/%]
DIGITS [0-9]
ID [a-zA-Z_][a-zA-Z0-9_]*
SYMBOLS [​(​)​{​}​,​;]
%%
[ \t\n]+ ;
{KEYWORDS} { printf("%s : KEYWORD\n", yytext); }

{ID} { printf("%s : IDENTIFIER\n", yytext); }

{DIGITS} { printf("%s : NUMBER\n", yytext); }

{RELATIONAL} { printf("%s : RELATIONAL OPERATOR\n", yytext); }

{ASSIGNMENT} { printf("%s : ASSIGNMENT OPERATOR\n", yytext); }

{ARITHMETIC} { printf("%s : ARITHMETIC OPERATOR\n", yytext); }

{SYMBOLS} { printf("%s : SYMBOLS\n", yytext); }

. ;
%%

int main(int argc, char *argv[]) {
    if(argc > 1) { 
        FILE *fp = fopen(argv[1], "r");
        if(fp) yyin = fp;
    }
    yylex();
    return 0;
}

File 1
       Code:
integer num1, num2, sum;
read num1, num2;
sum = num1 + num2;
display sum;
 
File 2
Code:
integer a, b;
read a, b;
if (a > b) then
{
    display a;
}
else
{
    ​display b;
}

File 3
Code:
integer i, n;
read n;
i = 1;
while (i <= n)
{
    display i;
    i++;
}

File 4
Code:
integer i, n;
read n;
for i = 1 to n step 2
{
    display a;
}

