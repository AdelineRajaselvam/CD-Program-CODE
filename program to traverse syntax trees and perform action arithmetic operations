Code:

#include <stdio.h>
 #include <stdlib.h>
 typedef struct Node {
 char data;
 struct Node *left;
 struct Node *right;
 } Node;
 Node* createNode(char data) {
 Node* newNode = (Node*)malloc(sizeof(Node));
 newNode->data = data;
 newNode->left = NULL;
 newNode->right = NULL;
 return newNode;
 }
 int evaluateExpression(Node* root) {
 if (root == NULL) return 0;

 if (root->data >= '0' && root->data <= '9') {
 return root->data- '0';
 }

 int leftValue = evaluateExpression(root->left);
 int rightValue = evaluateExpression(root->right);

 switch (root->data) {
 case '+':
return leftValue + rightValue;
 case '-':
 return leftValue- rightValue;
 case '*':
 return leftValue * rightValue;
 case '/':
 if (rightValue != 0) {
 return leftValue / rightValue;
 } else {
 printf("Error: Division by zero\n");
 exit(EXIT_FAILURE);
 }
 default:
 printf("Error: Invalid operator\n");
 exit(EXIT_FAILURE);
 }
 }
 int main() {

 Node* root = createNode('*');
 root->left = createNode('+');
 root->right = createNode('5');
 root->left->left = createNode('3');
 root->left->right = createNode('2');

 int result = evaluateExpression(root);
 printf("Result: %d\n", result);

 free(root->left->left);
 free(root->left->right);
 free(root->left);
 free(root->right);
 free(root);
 return 0;
 }

 Output:
                       Result: 25

